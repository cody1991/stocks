{"ast":null,"code":"import axios from'axios';// 使用多个CORS代理作为备用\nconst CORS_PROXIES=['https://api.allorigins.win/raw?url=','https://cors-anywhere.herokuapp.com/','https://thingproxy.freeboard.io/fetch/'];const YAHOO_FINANCE_BASE_URL='https://query1.finance.yahoo.com/v8/finance/chart';// 添加CORS代理配置\nconst createAxiosInstance=()=>{const instance=axios.create({timeout:30000,// 增加到30秒\nheaders:{'Accept':'application/json','Content-Type':'application/json'}});// 添加请求拦截器\ninstance.interceptors.request.use(config=>{console.log('Making request to:',config.url);return config;},error=>{console.error('Request error:',error);return Promise.reject(error);});// 添加响应拦截器\ninstance.interceptors.response.use(response=>{console.log('Response received:',response.status);return response;},error=>{var _error$response,_error$response2;console.error('Response error:',error.message);console.error('Error details:',(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.data);console.error('Error status:',(_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.status);return Promise.reject(error);});return instance;};const apiClient=createAxiosInstance();class StockApiService{// 获取股票实时报价\nasync getStockQuote(symbol){let lastError=null;// 尝试每个CORS代理\nfor(let i=0;i<CORS_PROXIES.length;i++){try{console.log(\"Fetching quote for \".concat(symbol,\" using proxy \").concat(i+1,\"...\"));const proxyUrl=CORS_PROXIES[i];const targetUrl=\"\".concat(YAHOO_FINANCE_BASE_URL,\"/\").concat(symbol,\"?range=1d&interval=1m&includePrePost=false\");const fullUrl=proxyUrl+encodeURIComponent(targetUrl);const response=await apiClient.get(fullUrl);console.log('API Response:',response.data);const result=response.data.chart.result[0];if(!result){throw new Error('No data received from API');}const meta=result.meta;const currentPrice=meta.regularMarketPrice;const previousClose=meta.previousClose;const change=currentPrice-previousClose;const changePercent=change/previousClose*100;const quoteData={symbol:meta.symbol,price:currentPrice,change:change,changePercent:changePercent,volume:meta.regularMarketVolume||0,marketCap:meta.marketCap||0,high:meta.regularMarketDayHigh||currentPrice,low:meta.regularMarketDayLow||currentPrice,open:meta.regularMarketOpen||currentPrice,previousClose:previousClose,longName:meta.longName||symbol,shortName:meta.shortName||symbol};console.log('Processed data:',quoteData);return quoteData;}catch(error){console.error(\"Proxy \".concat(i+1,\" failed:\"),error);lastError=error;continue;// 尝试下一个代理\n}}// 所有代理都失败了\nconst errorMessage=lastError instanceof Error?lastError.message:'未知错误';throw new Error(\"\\u83B7\\u53D6\".concat(symbol,\"\\u6570\\u636E\\u5931\\u8D25: \").concat(errorMessage));}// 获取股票新闻\nasync getStockNews(symbol){try{console.log(\"Fetching news for \".concat(symbol,\"...\"));// Yahoo Finance新闻API with CORS proxy\nconst url=\"https://api.allorigins.win/raw?url=https://query1.finance.yahoo.com/v1/news/search?q=\".concat(symbol,\"&count=10\");const response=await apiClient.get(url);const articles=response.data.news||[];return articles.map(article=>({title:article.title,summary:article.summary||article.title,url:article.link,publishedAt:article.pubDate,source:article.publisher||'Yahoo Finance'}));}catch(error){console.error('Error fetching stock news:',error);// 新闻数据不是必需的，返回空数组而不是抛出错误\nreturn[];}}// 获取财务数据\nasync getFinancialData(symbol){try{console.log(\"Fetching financial data for \".concat(symbol,\"...\"));// 使用Yahoo Finance财务数据API with CORS proxy\nconst url=\"\".concat(YAHOO_FINANCE_BASE_URL,\"/\").concat(symbol,\"?range=1d&interval=1m&includePrePost=false\");const response=await apiClient.get(url);const result=response.data.chart.result[0];if(!result){throw new Error('No financial data received from API');}const meta=result.meta;return{revenue:0,// Yahoo Finance chart API不提供这些数据\nnetIncome:0,eps:meta.trailingEPS||0,pe:meta.trailingPE||0,pb:meta.priceToBook||0,debtToEquity:0,roe:0,roa:0};}catch(error){console.error('Error fetching financial data:',error);const errorMessage=error instanceof Error?error.message:'未知错误';throw new Error(\"\\u83B7\\u53D6\".concat(symbol,\"\\u8D22\\u52A1\\u6570\\u636E\\u5931\\u8D25: \").concat(errorMessage));}}// 获取历史价格数据\nasync getPriceHistory(symbol){let period=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'daily';try{console.log(\"Fetching price history for \".concat(symbol,\"...\"));// 使用Yahoo Finance历史价格API with CORS proxy\nconst url=\"\".concat(YAHOO_FINANCE_BASE_URL,\"/\").concat(symbol,\"?range=1mo&interval=1d&includePrePost=false\");const response=await apiClient.get(url);const result=response.data.chart.result[0];if(!result){throw new Error('No time series data');}const timestamps=result.timestamp;const quotes=result.indicators.quote[0];return timestamps.map((timestamp,index)=>({date:new Date(timestamp*1000).toISOString().split('T')[0],open:quotes.open[index]||0,high:quotes.high[index]||0,low:quotes.low[index]||0,close:quotes.close[index]||0,volume:quotes.volume[index]||0})).slice(0,30);// 最近30天\n}catch(error){console.error('Error fetching price history:',error);const errorMessage=error instanceof Error?error.message:'未知错误';throw new Error(\"\\u83B7\\u53D6\".concat(symbol,\"\\u5386\\u53F2\\u4EF7\\u683C\\u5931\\u8D25: \").concat(errorMessage));}}}const stockApiService=new StockApiService();export default stockApiService;","map":{"version":3,"names":["axios","CORS_PROXIES","YAHOO_FINANCE_BASE_URL","createAxiosInstance","instance","create","timeout","headers","interceptors","request","use","config","console","log","url","error","Promise","reject","response","status","_error$response","_error$response2","message","data","apiClient","StockApiService","getStockQuote","symbol","lastError","i","length","concat","proxyUrl","targetUrl","fullUrl","encodeURIComponent","get","result","chart","Error","meta","currentPrice","regularMarketPrice","previousClose","change","changePercent","quoteData","price","volume","regularMarketVolume","marketCap","high","regularMarketDayHigh","low","regularMarketDayLow","open","regularMarketOpen","longName","shortName","errorMessage","getStockNews","articles","news","map","article","title","summary","link","publishedAt","pubDate","source","publisher","getFinancialData","revenue","netIncome","eps","trailingEPS","pe","trailingPE","pb","priceToBook","debtToEquity","roe","roa","getPriceHistory","period","arguments","undefined","timestamps","timestamp","quotes","indicators","quote","index","date","Date","toISOString","split","close","slice","stockApiService"],"sources":["/Users/cody/Desktop/tencent/stocks/src/services/stockApi.ts"],"sourcesContent":["import axios from 'axios';\n\n// 使用多个CORS代理作为备用\nconst CORS_PROXIES = [\n  'https://api.allorigins.win/raw?url=',\n  'https://cors-anywhere.herokuapp.com/',\n  'https://thingproxy.freeboard.io/fetch/'\n];\n\nconst YAHOO_FINANCE_BASE_URL = 'https://query1.finance.yahoo.com/v8/finance/chart';\n\n// 添加CORS代理配置\nconst createAxiosInstance = () => {\n  const instance = axios.create({\n    timeout: 30000, // 增加到30秒\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n    }\n  });\n\n  // 添加请求拦截器\n  instance.interceptors.request.use(\n    (config) => {\n      console.log('Making request to:', config.url);\n      return config;\n    },\n    (error) => {\n      console.error('Request error:', error);\n      return Promise.reject(error);\n    }\n  );\n\n  // 添加响应拦截器\n  instance.interceptors.response.use(\n    (response) => {\n      console.log('Response received:', response.status);\n      return response;\n    },\n    (error) => {\n      console.error('Response error:', error.message);\n      console.error('Error details:', error.response?.data);\n      console.error('Error status:', error.response?.status);\n      return Promise.reject(error);\n    }\n  );\n\n  return instance;\n};\n\nconst apiClient = createAxiosInstance();\n\nexport interface StockQuote {\n  symbol: string;\n  price: number;\n  change: number;\n  changePercent: number;\n  volume: number;\n  marketCap: number;\n  high: number;\n  low: number;\n  open: number;\n  previousClose: number;\n  longName?: string;\n  shortName?: string;\n}\n\nexport interface StockNews {\n  title: string;\n  summary: string;\n  url: string;\n  publishedAt: string;\n  source: string;\n}\n\nexport interface FinancialData {\n  revenue: number;\n  netIncome: number;\n  eps: number;\n  pe: number;\n  pb: number;\n  debtToEquity: number;\n  roe: number;\n  roa: number;\n}\n\nexport interface PriceData {\n  date: string;\n  open: number;\n  high: number;\n  low: number;\n  close: number;\n  volume: number;\n}\n\nclass StockApiService {\n  // 获取股票实时报价\n  async getStockQuote(symbol: string): Promise<StockQuote> {\n    let lastError: any = null;\n\n    // 尝试每个CORS代理\n    for (let i = 0; i < CORS_PROXIES.length; i++) {\n      try {\n        console.log(`Fetching quote for ${symbol} using proxy ${i + 1}...`);\n\n        const proxyUrl = CORS_PROXIES[i];\n        const targetUrl = `${YAHOO_FINANCE_BASE_URL}/${symbol}?range=1d&interval=1m&includePrePost=false`;\n        const fullUrl = proxyUrl + encodeURIComponent(targetUrl);\n\n        const response = await apiClient.get(fullUrl);\n\n        console.log('API Response:', response.data);\n\n        const result = response.data.chart.result[0];\n        if (!result) {\n          throw new Error('No data received from API');\n        }\n\n        const meta = result.meta;\n        const currentPrice = meta.regularMarketPrice;\n        const previousClose = meta.previousClose;\n        const change = currentPrice - previousClose;\n        const changePercent = (change / previousClose) * 100;\n\n        const quoteData = {\n          symbol: meta.symbol,\n          price: currentPrice,\n          change: change,\n          changePercent: changePercent,\n          volume: meta.regularMarketVolume || 0,\n          marketCap: meta.marketCap || 0,\n          high: meta.regularMarketDayHigh || currentPrice,\n          low: meta.regularMarketDayLow || currentPrice,\n          open: meta.regularMarketOpen || currentPrice,\n          previousClose: previousClose,\n          longName: meta.longName || symbol,\n          shortName: meta.shortName || symbol\n        };\n\n        console.log('Processed data:', quoteData);\n        return quoteData;\n      } catch (error) {\n        console.error(`Proxy ${i + 1} failed:`, error);\n        lastError = error;\n        continue; // 尝试下一个代理\n      }\n    }\n\n    // 所有代理都失败了\n    const errorMessage = lastError instanceof Error ? lastError.message : '未知错误';\n    throw new Error(`获取${symbol}数据失败: ${errorMessage}`);\n  }\n\n  // 获取股票新闻\n  async getStockNews(symbol: string): Promise<StockNews[]> {\n    try {\n      console.log(`Fetching news for ${symbol}...`);\n\n      // Yahoo Finance新闻API with CORS proxy\n      const url = `https://api.allorigins.win/raw?url=https://query1.finance.yahoo.com/v1/news/search?q=${symbol}&count=10`;\n      const response = await apiClient.get(url);\n\n      const articles = response.data.news || [];\n      return articles.map((article: any) => ({\n        title: article.title,\n        summary: article.summary || article.title,\n        url: article.link,\n        publishedAt: article.pubDate,\n        source: article.publisher || 'Yahoo Finance'\n      }));\n    } catch (error) {\n      console.error('Error fetching stock news:', error);\n      // 新闻数据不是必需的，返回空数组而不是抛出错误\n      return [];\n    }\n  }\n\n  // 获取财务数据\n  async getFinancialData(symbol: string): Promise<FinancialData> {\n    try {\n      console.log(`Fetching financial data for ${symbol}...`);\n\n      // 使用Yahoo Finance财务数据API with CORS proxy\n      const url = `${YAHOO_FINANCE_BASE_URL}/${symbol}?range=1d&interval=1m&includePrePost=false`;\n      const response = await apiClient.get(url);\n\n      const result = response.data.chart.result[0];\n      if (!result) {\n        throw new Error('No financial data received from API');\n      }\n\n      const meta = result.meta;\n\n      return {\n        revenue: 0, // Yahoo Finance chart API不提供这些数据\n        netIncome: 0,\n        eps: meta.trailingEPS || 0,\n        pe: meta.trailingPE || 0,\n        pb: meta.priceToBook || 0,\n        debtToEquity: 0,\n        roe: 0,\n        roa: 0\n      };\n    } catch (error) {\n      console.error('Error fetching financial data:', error);\n      const errorMessage = error instanceof Error ? error.message : '未知错误';\n      throw new Error(`获取${symbol}财务数据失败: ${errorMessage}`);\n    }\n  }\n\n  // 获取历史价格数据\n  async getPriceHistory(symbol: string, period: string = 'daily'): Promise<PriceData[]> {\n    try {\n      console.log(`Fetching price history for ${symbol}...`);\n\n      // 使用Yahoo Finance历史价格API with CORS proxy\n      const url = `${YAHOO_FINANCE_BASE_URL}/${symbol}?range=1mo&interval=1d&includePrePost=false`;\n      const response = await apiClient.get(url);\n\n      const result = response.data.chart.result[0];\n      if (!result) {\n        throw new Error('No time series data');\n      }\n\n      const timestamps = result.timestamp;\n      const quotes = result.indicators.quote[0];\n\n      return timestamps.map((timestamp: number, index: number) => ({\n        date: new Date(timestamp * 1000).toISOString().split('T')[0],\n        open: quotes.open[index] || 0,\n        high: quotes.high[index] || 0,\n        low: quotes.low[index] || 0,\n        close: quotes.close[index] || 0,\n        volume: quotes.volume[index] || 0\n      })).slice(0, 30); // 最近30天\n    } catch (error) {\n      console.error('Error fetching price history:', error);\n      const errorMessage = error instanceof Error ? error.message : '未知错误';\n      throw new Error(`获取${symbol}历史价格失败: ${errorMessage}`);\n    }\n  }\n}\n\nconst stockApiService = new StockApiService();\nexport default stockApiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}