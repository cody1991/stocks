{"ast":null,"code":"import axios from 'axios';\n\n// 使用多个CORS代理作为备用\nconst CORS_PROXIES = ['https://api.allorigins.win/raw?url=', 'https://cors-anywhere.herokuapp.com/', 'https://thingproxy.freeboard.io/fetch/'];\nconst YAHOO_FINANCE_BASE_URL = 'https://query1.finance.yahoo.com/v8/finance/chart';\n\n// 添加CORS代理配置\nconst createAxiosInstance = () => {\n  const instance = axios.create({\n    timeout: 30000,\n    // 增加到30秒\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    }\n  });\n\n  // 添加请求拦截器\n  instance.interceptors.request.use(config => {\n    console.log('Making request to:', config.url);\n    return config;\n  }, error => {\n    console.error('Request error:', error);\n    return Promise.reject(error);\n  });\n\n  // 添加响应拦截器\n  instance.interceptors.response.use(response => {\n    console.log('Response received:', response.status);\n    return response;\n  }, error => {\n    var _error$response, _error$response2;\n    console.error('Response error:', error.message);\n    console.error('Error details:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n    console.error('Error status:', (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status);\n    return Promise.reject(error);\n  });\n  return instance;\n};\nconst apiClient = createAxiosInstance();\nclass StockApiService {\n  // 获取股票实时报价\n  async getStockQuote(symbol) {\n    let lastError = null;\n\n    // 尝试每个CORS代理\n    for (let i = 0; i < CORS_PROXIES.length; i++) {\n      try {\n        console.log(`Fetching quote for ${symbol} using proxy ${i + 1}...`);\n        const proxyUrl = CORS_PROXIES[i];\n        const targetUrl = `${YAHOO_FINANCE_BASE_URL}/${symbol}?range=1d&interval=1m&includePrePost=false`;\n        const fullUrl = proxyUrl + encodeURIComponent(targetUrl);\n        const response = await apiClient.get(fullUrl);\n        console.log('API Response:', response.data);\n        const result = response.data.chart.result[0];\n        if (!result) {\n          throw new Error('No data received from API');\n        }\n        const meta = result.meta;\n        const currentPrice = meta.regularMarketPrice;\n        const previousClose = meta.previousClose;\n        const change = currentPrice - previousClose;\n        const changePercent = change / previousClose * 100;\n        const quoteData = {\n          symbol: meta.symbol,\n          price: currentPrice,\n          change: change,\n          changePercent: changePercent,\n          volume: meta.regularMarketVolume || 0,\n          marketCap: meta.marketCap || 0,\n          high: meta.regularMarketDayHigh || currentPrice,\n          low: meta.regularMarketDayLow || currentPrice,\n          open: meta.regularMarketOpen || currentPrice,\n          previousClose: previousClose,\n          longName: meta.longName || symbol,\n          shortName: meta.shortName || symbol\n        };\n        console.log('Processed data:', quoteData);\n        return quoteData;\n      } catch (error) {\n        console.error(`Proxy ${i + 1} failed:`, error);\n        lastError = error;\n        continue; // 尝试下一个代理\n      }\n    }\n\n    // 所有代理都失败了\n    const errorMessage = lastError instanceof Error ? lastError.message : '未知错误';\n    throw new Error(`获取${symbol}数据失败: ${errorMessage}`);\n  }\n\n  // 获取股票新闻\n  async getStockNews(symbol) {\n    try {\n      console.log(`Fetching news for ${symbol}...`);\n\n      // Yahoo Finance新闻API with CORS proxy\n      const url = `https://api.allorigins.win/raw?url=https://query1.finance.yahoo.com/v1/news/search?q=${symbol}&count=10`;\n      const response = await apiClient.get(url);\n      const articles = response.data.news || [];\n      return articles.map(article => ({\n        title: article.title,\n        summary: article.summary || article.title,\n        url: article.link,\n        publishedAt: article.pubDate,\n        source: article.publisher || 'Yahoo Finance'\n      }));\n    } catch (error) {\n      console.error('Error fetching stock news:', error);\n      // 新闻数据不是必需的，返回空数组而不是抛出错误\n      return [];\n    }\n  }\n\n  // 获取财务数据\n  async getFinancialData(symbol) {\n    try {\n      console.log(`Fetching financial data for ${symbol}...`);\n\n      // 使用Yahoo Finance财务数据API with CORS proxy\n      const url = `${YAHOO_FINANCE_BASE_URL}/${symbol}?range=1d&interval=1m&includePrePost=false`;\n      const response = await apiClient.get(url);\n      const result = response.data.chart.result[0];\n      if (!result) {\n        throw new Error('No financial data received from API');\n      }\n      const meta = result.meta;\n      return {\n        revenue: 0,\n        // Yahoo Finance chart API不提供这些数据\n        netIncome: 0,\n        eps: meta.trailingEPS || 0,\n        pe: meta.trailingPE || 0,\n        pb: meta.priceToBook || 0,\n        debtToEquity: 0,\n        roe: 0,\n        roa: 0\n      };\n    } catch (error) {\n      console.error('Error fetching financial data:', error);\n      const errorMessage = error instanceof Error ? error.message : '未知错误';\n      throw new Error(`获取${symbol}财务数据失败: ${errorMessage}`);\n    }\n  }\n\n  // 获取历史价格数据\n  async getPriceHistory(symbol, period = 'daily') {\n    try {\n      console.log(`Fetching price history for ${symbol}...`);\n\n      // 使用Yahoo Finance历史价格API with CORS proxy\n      const url = `${YAHOO_FINANCE_BASE_URL}/${symbol}?range=1mo&interval=1d&includePrePost=false`;\n      const response = await apiClient.get(url);\n      const result = response.data.chart.result[0];\n      if (!result) {\n        throw new Error('No time series data');\n      }\n      const timestamps = result.timestamp;\n      const quotes = result.indicators.quote[0];\n      return timestamps.map((timestamp, index) => ({\n        date: new Date(timestamp * 1000).toISOString().split('T')[0],\n        open: quotes.open[index] || 0,\n        high: quotes.high[index] || 0,\n        low: quotes.low[index] || 0,\n        close: quotes.close[index] || 0,\n        volume: quotes.volume[index] || 0\n      })).slice(0, 30); // 最近30天\n    } catch (error) {\n      console.error('Error fetching price history:', error);\n      const errorMessage = error instanceof Error ? error.message : '未知错误';\n      throw new Error(`获取${symbol}历史价格失败: ${errorMessage}`);\n    }\n  }\n}\nconst stockApiService = new StockApiService();\nexport default stockApiService;","map":{"version":3,"names":["axios","CORS_PROXIES","YAHOO_FINANCE_BASE_URL","createAxiosInstance","instance","create","timeout","headers","interceptors","request","use","config","console","log","url","error","Promise","reject","response","status","_error$response","_error$response2","message","data","apiClient","StockApiService","getStockQuote","symbol","lastError","i","length","proxyUrl","targetUrl","fullUrl","encodeURIComponent","get","result","chart","Error","meta","currentPrice","regularMarketPrice","previousClose","change","changePercent","quoteData","price","volume","regularMarketVolume","marketCap","high","regularMarketDayHigh","low","regularMarketDayLow","open","regularMarketOpen","longName","shortName","errorMessage","getStockNews","articles","news","map","article","title","summary","link","publishedAt","pubDate","source","publisher","getFinancialData","revenue","netIncome","eps","trailingEPS","pe","trailingPE","pb","priceToBook","debtToEquity","roe","roa","getPriceHistory","period","timestamps","timestamp","quotes","indicators","quote","index","date","Date","toISOString","split","close","slice","stockApiService"],"sources":["/Users/cody/Desktop/tencent/stocks/src/services/stockApi.ts"],"sourcesContent":["import axios from 'axios';\n\n// 使用多个CORS代理作为备用\nconst CORS_PROXIES = [\n  'https://api.allorigins.win/raw?url=',\n  'https://cors-anywhere.herokuapp.com/',\n  'https://thingproxy.freeboard.io/fetch/'\n];\n\nconst YAHOO_FINANCE_BASE_URL = 'https://query1.finance.yahoo.com/v8/finance/chart';\n\n// 添加CORS代理配置\nconst createAxiosInstance = () => {\n  const instance = axios.create({\n    timeout: 30000, // 增加到30秒\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n    }\n  });\n\n  // 添加请求拦截器\n  instance.interceptors.request.use(\n    (config) => {\n      console.log('Making request to:', config.url);\n      return config;\n    },\n    (error) => {\n      console.error('Request error:', error);\n      return Promise.reject(error);\n    }\n  );\n\n  // 添加响应拦截器\n  instance.interceptors.response.use(\n    (response) => {\n      console.log('Response received:', response.status);\n      return response;\n    },\n    (error) => {\n      console.error('Response error:', error.message);\n      console.error('Error details:', error.response?.data);\n      console.error('Error status:', error.response?.status);\n      return Promise.reject(error);\n    }\n  );\n\n  return instance;\n};\n\nconst apiClient = createAxiosInstance();\n\nexport interface StockQuote {\n  symbol: string;\n  price: number;\n  change: number;\n  changePercent: number;\n  volume: number;\n  marketCap: number;\n  high: number;\n  low: number;\n  open: number;\n  previousClose: number;\n  longName?: string;\n  shortName?: string;\n}\n\nexport interface StockNews {\n  title: string;\n  summary: string;\n  url: string;\n  publishedAt: string;\n  source: string;\n}\n\nexport interface FinancialData {\n  revenue: number;\n  netIncome: number;\n  eps: number;\n  pe: number;\n  pb: number;\n  debtToEquity: number;\n  roe: number;\n  roa: number;\n}\n\nexport interface PriceData {\n  date: string;\n  open: number;\n  high: number;\n  low: number;\n  close: number;\n  volume: number;\n}\n\nclass StockApiService {\n  // 获取股票实时报价\n  async getStockQuote(symbol: string): Promise<StockQuote> {\n    let lastError: any = null;\n\n    // 尝试每个CORS代理\n    for (let i = 0; i < CORS_PROXIES.length; i++) {\n      try {\n        console.log(`Fetching quote for ${symbol} using proxy ${i + 1}...`);\n\n        const proxyUrl = CORS_PROXIES[i];\n        const targetUrl = `${YAHOO_FINANCE_BASE_URL}/${symbol}?range=1d&interval=1m&includePrePost=false`;\n        const fullUrl = proxyUrl + encodeURIComponent(targetUrl);\n\n        const response = await apiClient.get(fullUrl);\n\n        console.log('API Response:', response.data);\n\n        const result = response.data.chart.result[0];\n        if (!result) {\n          throw new Error('No data received from API');\n        }\n\n        const meta = result.meta;\n        const currentPrice = meta.regularMarketPrice;\n        const previousClose = meta.previousClose;\n        const change = currentPrice - previousClose;\n        const changePercent = (change / previousClose) * 100;\n\n        const quoteData = {\n          symbol: meta.symbol,\n          price: currentPrice,\n          change: change,\n          changePercent: changePercent,\n          volume: meta.regularMarketVolume || 0,\n          marketCap: meta.marketCap || 0,\n          high: meta.regularMarketDayHigh || currentPrice,\n          low: meta.regularMarketDayLow || currentPrice,\n          open: meta.regularMarketOpen || currentPrice,\n          previousClose: previousClose,\n          longName: meta.longName || symbol,\n          shortName: meta.shortName || symbol\n        };\n\n        console.log('Processed data:', quoteData);\n        return quoteData;\n      } catch (error) {\n        console.error(`Proxy ${i + 1} failed:`, error);\n        lastError = error;\n        continue; // 尝试下一个代理\n      }\n    }\n\n    // 所有代理都失败了\n    const errorMessage = lastError instanceof Error ? lastError.message : '未知错误';\n    throw new Error(`获取${symbol}数据失败: ${errorMessage}`);\n  }\n\n  // 获取股票新闻\n  async getStockNews(symbol: string): Promise<StockNews[]> {\n    try {\n      console.log(`Fetching news for ${symbol}...`);\n\n      // Yahoo Finance新闻API with CORS proxy\n      const url = `https://api.allorigins.win/raw?url=https://query1.finance.yahoo.com/v1/news/search?q=${symbol}&count=10`;\n      const response = await apiClient.get(url);\n\n      const articles = response.data.news || [];\n      return articles.map((article: any) => ({\n        title: article.title,\n        summary: article.summary || article.title,\n        url: article.link,\n        publishedAt: article.pubDate,\n        source: article.publisher || 'Yahoo Finance'\n      }));\n    } catch (error) {\n      console.error('Error fetching stock news:', error);\n      // 新闻数据不是必需的，返回空数组而不是抛出错误\n      return [];\n    }\n  }\n\n  // 获取财务数据\n  async getFinancialData(symbol: string): Promise<FinancialData> {\n    try {\n      console.log(`Fetching financial data for ${symbol}...`);\n\n      // 使用Yahoo Finance财务数据API with CORS proxy\n      const url = `${YAHOO_FINANCE_BASE_URL}/${symbol}?range=1d&interval=1m&includePrePost=false`;\n      const response = await apiClient.get(url);\n\n      const result = response.data.chart.result[0];\n      if (!result) {\n        throw new Error('No financial data received from API');\n      }\n\n      const meta = result.meta;\n\n      return {\n        revenue: 0, // Yahoo Finance chart API不提供这些数据\n        netIncome: 0,\n        eps: meta.trailingEPS || 0,\n        pe: meta.trailingPE || 0,\n        pb: meta.priceToBook || 0,\n        debtToEquity: 0,\n        roe: 0,\n        roa: 0\n      };\n    } catch (error) {\n      console.error('Error fetching financial data:', error);\n      const errorMessage = error instanceof Error ? error.message : '未知错误';\n      throw new Error(`获取${symbol}财务数据失败: ${errorMessage}`);\n    }\n  }\n\n  // 获取历史价格数据\n  async getPriceHistory(symbol: string, period: string = 'daily'): Promise<PriceData[]> {\n    try {\n      console.log(`Fetching price history for ${symbol}...`);\n\n      // 使用Yahoo Finance历史价格API with CORS proxy\n      const url = `${YAHOO_FINANCE_BASE_URL}/${symbol}?range=1mo&interval=1d&includePrePost=false`;\n      const response = await apiClient.get(url);\n\n      const result = response.data.chart.result[0];\n      if (!result) {\n        throw new Error('No time series data');\n      }\n\n      const timestamps = result.timestamp;\n      const quotes = result.indicators.quote[0];\n\n      return timestamps.map((timestamp: number, index: number) => ({\n        date: new Date(timestamp * 1000).toISOString().split('T')[0],\n        open: quotes.open[index] || 0,\n        high: quotes.high[index] || 0,\n        low: quotes.low[index] || 0,\n        close: quotes.close[index] || 0,\n        volume: quotes.volume[index] || 0\n      })).slice(0, 30); // 最近30天\n    } catch (error) {\n      console.error('Error fetching price history:', error);\n      const errorMessage = error instanceof Error ? error.message : '未知错误';\n      throw new Error(`获取${symbol}历史价格失败: ${errorMessage}`);\n    }\n  }\n}\n\nconst stockApiService = new StockApiService();\nexport default stockApiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}